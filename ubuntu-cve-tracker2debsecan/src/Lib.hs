module Lib
    ( someFunc
    , parseFile
    , paragraph
    , paragraphs
    ) where

import Data.List
import System.Exit
import Text.Parsec
import Text.Parsec.Char
import Text.Parsec.String

key :: Parser String
key = (many1 (alphaNum <|> oneOf "-_/")) <?> "key"

line = many1 (satisfy notNewline)
  where
    notNewline c = c /= '\n'

linevalue :: Parser String
linevalue = char ' ' *> line <?> "linevalue"

blockvalue :: Parser String
blockvalue = blockvalue' <?> "blockvalue"
  where
    blockvalue' = do string "\n "
                     lines <- line `sepBy1` try (string "\n ")
                     return $ intercalate "\n" lines

keyvalue :: Parser (String, String)
keyvalue = do k <- key
              char ':'
              v <- option "" $ try (blockvalue <|> linevalue)
              return (k, v)

paragraph :: Parser [(String, String)]
paragraph = keyvalue `sepEndBy1` (char '\n')

paragraphs = paragraph `sepEndBy1` (string "\n\n") 

parseFile :: Parser a -> String -> IO a
parseFile p fileName = parseFromFile p fileName >>= either report return
  where
    report err = do
        putStrLn $ "Error: " ++ show err
        exitFailure

someFunc :: IO ()
someFunc = putStrLn "Hello World!"
