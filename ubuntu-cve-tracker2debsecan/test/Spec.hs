import Lib

import           Text.Parsec
import Test.Hspec.Parsec

import Test.Hspec

main :: IO ()
main = hspec $ do
  describe "The paragraph parsing" $ do
    describe "the key parser" $ do
      let key' = parse key ""
      it "should parse any chars" $ do
        key' "Aa0 _" `shouldParse` "Aa0 _" 
      it "should stop at ':'" $ do
        key' "something: lala" `shouldParse` "something"
      it "should fail on newlines" $ do
        key' `shouldFailOn` "\nsomething: lala"
      it "should fail on colon" $ do
        key' `shouldFailOn` ":"

    describe "the line-value parser" $ do
      let linevalue' = parse linevalue ""
      it "should stop at the end of the line" $ do
        linevalue' "myvalue0_\nother" `shouldParse` "myvalue0_"
      it "should fail to parse empty strings" $ do
        linevalue' `shouldFailOn` ""
      it "should fail to parse newlines" $ do
        linevalue' `shouldFailOn` "\n"

    describe "the block-value parser" $ do
      let blockvalue' = parse blockvalue ""
      it "should parse single-line blocks" $ do
        blockvalue' "\n line1" `shouldParse` "line1"
      it "should parse single-line blocks ending in newline" $ do
        blockvalue' "\n line1\n" `shouldParse` "line1"
      it "should parse multi-line blocks" $ do
        blockvalue' "\n line1\n line2" `shouldParse` "line1\nline2"
      it "should parse multi-line blocks ending in newline" $ do
        blockvalue' "\n line1\n line2\n" `shouldParse` "line1\nline2"
      it "should fail on empty strings" $ do
        blockvalue' `shouldFailOn` ""
      it "should fail on just new lines" $ do
        blockvalue' `shouldFailOn` "\n"
      it "should fail on just new lines and space" $ do
        blockvalue' `shouldFailOn` "\n "


    describe "the value parser" $ do
      let value' = parse value ""
      it "should parse empty values" $ do
        value' "" `shouldParse` ""
      it "should parse line values" $ do
        value' "something" `shouldParse` "something"
      it "should parse multiline values" $ do
        value' "\n line1\n line2\n line3" `shouldParse` "line1\nline2\nline3"

    describe "the key-value parser" $ do
      let keyvalue' = parse keyvalue ""
      it "should parse keys with no values" $ do
        keyvalue' "key:" `shouldParse` ("key", "") 
      it "should parse keys with no values (containing just spaces)" $ do
        keyvalue' "key:   " `shouldParse` ("key", "") 
      it "should parse single-line key values" $ do
        keyvalue' "key: value" `shouldParse` ("key", "value") 
      it "should parse multi-line key value" $ do
        keyvalue' "key:\n line1\n line2" `shouldParse` ("key", "line1\nline2") 

    describe "the paragraph parser" $ do
      let paragraph' = parse paragraph ""
      it "should parse paragraph containing no key-values" $ do
        paragraph' "" `shouldParse` []
      it "should parse complex paragraphs even with empty values and spaces" $ do
        paragraph' "k1: v1\nk2: \nk3:\n l1\n l2" `shouldParse` [("k1", "v1"), ("k2", ""), ("k3", "l1\nl2")]
      it "should parse complex paragraphs with empty but nospaces" $ do
        paragraph' "k1: v1\nk2:\nk3:\n l1\n l2" `shouldParse` [("k1", "v1"), ("k2", ""), ("k3", "l1\nl2")]

      it "should 1 parse complex paragraphs with multiple multi-line values" $ do
        paragraph' "k1:\n l1" `shouldParse` [("k1", "l1")]
      it "should 2 parse complex paragraphs with multiple multi-line values" $ do
        paragraph' "k1:\n l1\n l2" `shouldParse` [("k1", "l1\nl2")]
      it "should 2.5 parse complex paragraphs with multiple multi-line values" $ do
        paragraph' "k1:\n l1\n l2\n" `shouldParse` [("k1", "l1\nl2")]
      it "should 3 parse complex paragraphs with multiple multi-line values" $ do
        paragraph' "k1:\n l1\n l2\nk2: v2" `shouldParse` [("k1", "l1\nl2"), ("k2", "v2")]

      it "should parse complex paragraphs with multiple multi-line values" $ do
        paragraph' "k1:\n l1\n l2\nk2:\n l1\n l2" `shouldParse` [("k1", "l1\nl2"), ("k2", "l1\nl2")]
      it "should stop after when a key is not immediately found" $ do
        paragraph' "k1: v1\n\nk2: v2" `shouldParse` [("k1", "v1")]
  
  describe "The statusblock parsing" $ do
    describe "the patchkey parser" $ do
      let patchkey' = parse patchkey ""
      it "should parse empty keyvalues starting with Patches_" $ do
        patchkey' "Patches_mypackage:" `shouldParse` ()
      it "should parse multiline keyvalues starting with Patches_" $ do
        patchkey' "Patches_mypackage:\n some info" `shouldParse` ()

    describe "the release parser" $ do
      let release' = parse release ""
      it "should parse release names" $ do
        release' "releasename" `shouldParse` "releasename"
      it "should stop at '_'" $ do
        release' "releasename_something" `shouldParse` "releasename"

    describe "the package parser" $ do
      let package' = parse package ""
      it "should parse package names" $ do
        package' "packagename" `shouldParse` "packagename"
      it "should stop at ':'" $ do
        package' "packagename: something" `shouldParse` "packagename"

    describe "the status parser" $ do
      let status' = parse status ""
      it "should parse DNE" $ do
        status' "DNE" `shouldParse` DNE
      it "should parse ignored" $ do
        status' "ignored" `shouldParse` IGNORED
      it "should parse not-affected" $ do
        status' "not-affected" `shouldParse` NOTAFFECTED
      it "should parse needs-triage" $ do
        status' "needs-triage" `shouldParse` NEEDSTRIAGE
      it "should parse needed" $ do
        status' "needed" `shouldParse` NEEDED
      it "should parse active" $ do
        status' "active" `shouldParse` ACTIVE
      it "should parse deferred" $ do
        status' "deferred" `shouldParse` DEFERRED
      it "should parse pending" $ do
        status' "pending" `shouldParse` PENDING
      it "should parse released" $ do
        status' "released" `shouldParse` RELEASED
      it "should parse released-esm" $ do
        status' "released-esm" `shouldParse` RELEASEDESM

    describe "the comment parser" $ do
      let comment' = parse comment ""
      it "should parse comments between parenthesis" $ do
        comment' "(foo bar)" `shouldParse` "foo bar"
      it "should parse comments between brackets" $ do
        comment' "[foo bar]" `shouldParse` "foo bar"

    describe "the releasepackagestatus parser" $ do
      let releasepackagestatus' = parse releasepackagestatus ""
      it "should parse releasepackagestatus info without comments" $ do
        releasepackagestatus' "release_package: DNE" `shouldParse` ("release", "package", DNE, Nothing)
      it "should parse releasepackagestatus info with comments" $ do
        releasepackagestatus' "release_package: DNE (comment)" `shouldParse` ("release", "package", DNE, Just "comment")

    describe "the packageblock parser" $ do
      let packageblock' = parse packageblock ""
      it "should parse empty packageblocks" $ do
        packageblock' "Patches_package:\n" `shouldParse` []
      it "should parse filled packageblocks (one line)" $ do
        packageblock' "Patches_package:\nrelease_package: DNE" `shouldParse` [("release", "package", DNE, Nothing)]
      it "should parse filled packageblocks (many lines)" $ do
        packageblock' "Patches_package:\nrelease_package: DNE\nrelease_package: DNE (comment)" `shouldParse` [("release", "package", DNE, Nothing), ("release", "package", DNE, Just "comment")]
      it "should stop after two newlines" $ do
        packageblock' "Patches_package:\nrelease_package: DNE\n\nrelease2_package2: DNE" `shouldParse` [("release", "package", DNE, Nothing)]

    describe "the statusblock parser" $ do
      let statusblock' = parse statusblock ""
      it "should parse empty statusblock" $ do
        statusblock' "" `shouldParse` []
      it "should parse filled statusblock (one block)" $ do
        statusblock' "Patches_package:\nrelease_package: DNE" `shouldParse` [("release", "package", DNE, Nothing)]
      it "should parse filled statusblock (many blocks)" $ do
        statusblock' "Patches_package:\nrelease_package: DNE\n\nPatches_package2:\nrelease_package2: DNE" `shouldParse` [("release", "package", DNE, Nothing), ("release", "package2", DNE, Nothing)]

  describe "The CVE parsing" $ do
    let cveParser' = parse cveParser ""
    it "should parse empty CVE files" $ do
      cveParser' "" `shouldParse` ([], [])
    it "should parse empty paragraph CVE files" $ do
      cveParser' "\nPatches_jackson-databind:\nupstream_jackson-databind: released (2.9.10.4)" `shouldParse` ([], [("upstream", "jackson-databind", RELEASED, Just "2.9.10.4")])
    it "should parse well-formed (minimal) CVE files" $ do
      cveParser' "K:\n\n" `shouldParse` ([("K", "")], [])
    it "should parse well-formed (non-empty) CVE files" $ do
      cveParser' "Candidate: CVE-2020-11111\n\n\nPatches_jackson-databind:\nupstream_jackson-databind: released (2.9.10.4)\n" `shouldParse` ([("Candidate", "CVE-2020-11111")], [("upstream", "jackson-databind", RELEASED, Just "2.9.10.4")])
      
